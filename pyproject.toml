[tool.poetry]
name = "pepperpy"
description = "A modern, modular Python utility library"
authors = ["Felipe Pimentel <fpimentel88@gmail.com>"]
version = "1.3.1"
repository = "https://github.com/felipepimentel/pepperpy"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
pydantic = {version = "^2.9.2", optional = true}
pyyaml = {version = "^6.0", optional = true}
rich = {version = "^13.0.0", optional = true}
python-dotenv = {version = "^1.0.0", optional = true}
markdown = {version = "^3.4.0", optional = true}
pypdf = {version = "^3.0.0", optional = true}
python-magic = {version = "^0.4.27", optional = true}
fitz = {version = "^0.0.1", optional = true}
ebooklib = {version = "^0.18", optional = true}
beautifulsoup4 = {version = "^4.11.1", optional = true}
lxml = {version = "^4.9.1", optional = true}
audioread = {version = "^2.1.9", optional = true}
mutagen = {version = "^1.45.1", optional = true}
soundfile = {version = "^0.10.3", optional = true}
pillow = {version = "^9.2.0", optional = true}
av = {version = "^10.0.0", optional = true}
cryptography = {version = "^39.0.0", optional = true}
bcrypt = {version = "^4.0.1", optional = true}
jwt = {version = "^1.7.1", optional = true}
sqlalchemy = {version = "^1.4.39", optional = true}
alembic = {version = "^1.8.1", optional = true}
asyncpg = {version = "0.30.0", optional = true}
httpx = {version = "^0.23.0", optional = true}
aiohttp = {version = "^3.8.3", optional = true}
aiofiles = {version = "^0.11.0", optional = true}
torch = {version = "^1.12.1", optional = true}
numpy = {version = "^1.23.3", optional = true}

[tool.poetry.extras]
console = ["rich", "python-dotenv"]
yaml_support = ["pyyaml"]
markdown = ["markdown"]
pdf = ["pypdf", "python-magic", "fitz"]
epub = ["ebooklib", "beautifulsoup4", "lxml"]
html = ["beautifulsoup4", "lxml"]
audio_basic = ["audioread"]
audio_metadata = ["mutagen"]
audio_io = ["soundfile"]
image_processing = ["pillow"]
video_processing = ["av"]
security_cryptography = ["cryptography"]
security_auth = ["bcrypt", "jwt"]
database_core = ["sqlalchemy", "alembic"]
database_postgres = ["asyncpg"]
http_client_sync = ["httpx"]
http_client_async = ["aiohttp"]
file_io_async = ["aiofiles"]
machine_learning = ["torch"]
numerical_computing = ["numpy"]
all = [
    "pydantic",
    "pyyaml",
    "rich",
    "python-dotenv",
    "markdown",
    "pypdf",
    "python-magic",
    "fitz",
    "ebooklib",
    "beautifulsoup4",
    "lxml",
    "audioread",
    "mutagen",
    "soundfile",
    "pillow",
    "av",
    "cryptography",
    "bcrypt",
    "jwt",
    "sqlalchemy",
    "alembic",
    "asyncpg",
    "httpx",
    "aiohttp",
    "aiofiles",
    "torch",
    "numpy"
]

[tool.poetry.group.dev.dependencies]
pre-commit = "^4.0.1"
black = "^24.10.0"
ruff = "^0.7.3"
isort = "^5.10.2"
pytest = "^8.3.3"
pytest-asyncio = "^0.24.0"
pytest-cov = "^6.0.0"
pytest-mock = "^3.14.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 100

[tool.ruff.lint]
select = ["E", "F", "B", "I", "N", "ANN"]
ignore = [
    "E501", "N812", "B006", "ANN101", "ANN102", "ANN401", "ANN204", "ANN003", "ANN001", "ANN202", "ANN205", "ANN002"
]

[tool.ruff.lint.per-file-ignores]
"pepperpy/ai/optimization/*.py" = ["N803"]
"tests/*" = ["ANN"]

[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'

[tool.mypy]
python_version = "3.12"
strict = true
plugins = ["sqlalchemy.ext.mypy.plugin"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_default_fixture_loop_scope = "function"
addopts = "--cov=pepperpy --cov-report=term-missing"

[tool.poetry.scripts]
lint = "tools.scripts:lint"

[tool.semantic_release]
version_variable = [
    "pepperpy/__init__.py:__version__",
    "pyproject.toml:tool.poetry.version"
]
branch = "main"
upload_to_pypi = true
build_command = "poetry build"

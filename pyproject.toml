[tool.poetry]
name = "pepperpy"
description = "A modern, modular Python utility library"
authors = ["Felipe Pimentel <fpimentel88@gmail.com>"]
version = "1.3.1"
repository = "https://github.com/felipepimentel/pepperpy"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
pydantic = "^2.6.1"
pyyaml = "^6.0.1"
rich = {version = "^13.0.0", optional = true}
python-dotenv = {version = "^1.0.0", optional = true}
markdown-it-py = "^3.0.0"
pypdf = "^4.0.1"
python-magic = {version = "^0.4.27", optional = true}
ebooklib = {version = "^0.18", optional = true}
beautifulsoup4 = "^4.12.3"
lxml = "^5.1.0"
soundfile = "^0.12.1"
pillow = "^10.2.0"
opencv-python = "^4.9.0.80"
cryptography = {version = "^39.0.0", optional = true}
bcrypt = {version = "^4.0.1", optional = true}
pyjwt = "^2.8.0"
sqlalchemy = "^2.0.27"
alembic = {version = "^1.8.1", optional = true}
asyncpg = "^0.29.0"
httpx = "^0.27.0"
aiohttp = "^3.9.3"
aiofiles = {version = "^24.1.0", optional = true}
numpy = "^1.23.3"
scikit-learn = "^1.4.0"
torch = {version = "^2.5.1", optional = true}
redis = {version = "^5.0.1", extras = ["hiredis"]}
orjson = "^3.9.10"
websockets = "^12.0"
langdetect = "^1.0.9"
typer = {extras = ["all"], version = "^0.13.0"}
msgpack = "^1.0.7"
aiosqlite = "^0.19.0"
python-docx = "^1.1.0"
PyMuPDF = "^1.23.8"
pandas = "^2.2.0"
openpyxl = "^3.1.2"
duckdb = "^0.10.0"
moviepy = "^1.0.3"
pydub = "^0.25.1"
pymediainfo = "^6.1.0"
toml = "^0.10.2"
jsonschema = "^4.21.1"
tomli = "^2.1.0"
tomli-w = "^1.1.0"
psutil = "^6.1.0"
transformers = {version = "^4.0.0", optional = true}
openai = {version = "^1.0.0", optional = true}
sentence-transformers = {version = "^2.0.0", optional = true}

[tool.poetry.extras]
# Core Utilities
core = ["pydantic"]
yaml = ["pyyaml"]
logging = ["rich"]
config = ["python-dotenv", "toml", "jsonschema"]

# Console Features
console_basic = ["rich"]
console_full = ["rich", "python-dotenv", "markdown-it-py"]
console_interactive = ["rich", "prompt-toolkit"]

# Document Processing
docs_markdown = ["markdown-it-py"]
docs_pdf = ["pypdf", "python-magic"]
docs_pdf_advanced = ["pypdf", "python-magic"]
docs_epub = ["ebooklib", "beautifulsoup4", "lxml"]
docs_html = ["beautifulsoup4", "lxml"]

# Media Processing
media_audio_basic = ["soundfile", "pydub"]
media_audio_full = ["soundfile", "pydub", "moviepy"]
media_image = ["pillow"]
media_video = ["opencv-python", "moviepy", "python-mediainfo"]
media_full = [
    "soundfile",
    "pydub",
    "moviepy",
    "opencv-python",
    "python-mediainfo"
]

# Security
security_basic = ["cryptography"]
security_auth = ["bcrypt", "pyjwt"]
security_full = ["cryptography", "bcrypt", "pyjwt"]

# Database
db_core = ["sqlalchemy"]
db_migrations = ["sqlalchemy", "alembic"]
db_postgres = ["asyncpg"]
db_duckdb = ["duckdb"]
db_full = ["sqlalchemy", "alembic", "asyncpg", "duckdb"]

# HTTP Clients
http_sync = ["httpx"]
http_async = ["aiohttp"]
http_full = ["httpx", "aiohttp"]

# File Operations
files_async = ["aiofiles"]
files_full = ["aiofiles", "python-magic"]

# AI/ML Features
ai_core = ["numpy", "pydantic", "scikit-learn"]
ai_llm = ["numpy", "pydantic", "httpx"]
ai_rag = ["numpy", "pydantic", "httpx", "pypdf", "beautifulsoup4"]
ai_optimization = ["numpy", "torch"]
ai_full = [
    "numpy",
    "torch",
    "pydantic",
    "httpx",
    "pypdf",
    "beautifulsoup4",
    "lxml",
    "openai"
]
ai = [
    "numpy",
    "pydantic",
    "httpx",
    "pypdf",
    "beautifulsoup4",
    "lxml",
    "openai",
    "transformers",
    "sentence-transformers"
]

# Text Processing
text_processing = [
    "langdetect",
    "markdown-it-py",
    "pypdf"
]

# Complete Bundles
minimal = ["pydantic", "rich", "python-dotenv"]
standard = [
    "pydantic",
    "rich",
    "python-dotenv",
    "httpx",
    "sqlalchemy",
    "aiofiles"
]
all = [
    "sentence-transformers",
    "openai",
    "pydantic",
    "pyyaml",
    "rich",
    "python-dotenv",
    "markdown-it-py",
    "pypdf",
    "python-magic",
    "ebooklib",
    "beautifulsoup4",
    "lxml",
    "soundfile",
    "opencv-python",
    "pillow",
    "cryptography",
    "bcrypt",
    "pyjwt",
    "sqlalchemy",
    "alembic",
    "asyncpg",
    "httpx",
    "aiohttp",
    "aiofiles",
    "torch",
    "numpy",
    "redis",
    "orjson",
    "websockets",
    "transformers"
]

# Cache & Storage
cache = [
    "redis",
    "msgpack",
    "hiredis"
]

[tool.poetry.group.dev.dependencies]
pre-commit = "^4.0.1"
black = "^24.10.0"
ruff = "^0.7.3"
isort = "^5.10.2"
pytest = "^8.3.3"
pytest-asyncio = "^0.24.0"
pytest-cov = "^6.0.0"
pytest-mock = "^3.14.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 100

[tool.ruff.lint]
select = ["E", "F", "B", "I", "N", "ANN"]
ignore = [
    "E501", "N812", "B006", "ANN101", "ANN102", "ANN401", "ANN204", "ANN003", "ANN001", "ANN202", "ANN205", "ANN002", "B904"
]

[tool.ruff.lint.per-file-ignores]
"pepperpy/ai/optimization/*.py" = ["N803"]
"tests/*" = ["ANN"]

[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'

[tool.mypy]
python_version = "3.12"
strict = true
plugins = ["sqlalchemy.ext.mypy.plugin"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_default_fixture_loop_scope = "function"
addopts = "--cov=pepperpy --cov-report=term-missing"

[tool.poetry.scripts]
lint = "tools.scripts:lint"

[tool.semantic_release]
version_variable = [
    "pepperpy/__init__.py:__version__",
    "pyproject.toml:tool.poetry.version"
]
branch = "main"
upload_to_pypi = true
build_command = "poetry build"

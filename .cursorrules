# Cursor Rules for PepperPy Project

# Type Safety and Async Patterns
rules:
  - name: "Type Safety"
    patterns:
      - "from typing import *"
      - "async def"
      - "-> None"
      - "-> Any"
    message: "Ensure proper type hints and async patterns"

# Module Structure
module_structure:
  core:
    - "core/: Framework foundation and shared utilities"
    - "db/: All database operations (including vectors)"
    - "ai/: AI/ML operations"
    - "files/: File system operations"
    - "console/: Terminal interface"
    - "ui/: User interface components"

# Provider Pattern
providers:
  base_pattern:
    - "class {Name}Provider(AIProvider):"
    - "async def initialize(self) -> None:"
    - "async def cleanup(self) -> None:"
    - "async def complete(self, prompt: str, **kwargs: Any) -> AIResponse:"
    - "async def stream(self, prompt: str, **kwargs: Any) -> AsyncGenerator[AIResponse, None]:"
    - "async def get_embedding(self, text: str) -> list[float]:"

# Factory Pattern
factory_pattern:
  - "class {Name}Factory:"
  - "@staticmethod"
  - "def create_{item}(config: {Name}Config) -> {Name}:"

# Code Block Format
code_blocks:
  - format: "```{language_id}:{path/to/file}"
  - example: "```python:pepperpy/ai/providers/base.py"

# Documentation
documentation:
  - "\"\"\"Module docstring\"\"\""
  - "\"\"\"Class docstring\"\"\""
  - "\"\"\"Method docstring\"\"\""

# Error Handling
error_handling:
  pattern: |
    try:
        ...
    except Exception as e:
        raise {Module}Error(f"Error message: {e}", cause=e)

# Configuration
configuration:
  pattern: |
    @dataclass
    class {Name}Config(ModuleConfig):
        name: str
        metadata: JsonDict = field(default_factory=dict)
        _instance: ClassVar[Any] = None

# Provider Independence
provider_independence:
  - "No direct provider imports in consumer code"
  - "Use factory pattern for provider creation"
  - "Configure provider via environment variables"
  - "Provider-specific code isolated in provider modules"

# Testing Requirements
testing:
  - "100% test coverage"
  - "Async test patterns"
  - "Mock external services"
  - "Test all error cases"

# Quality Requirements
quality:
  - "mypy --strict mode"
  - "ruff linting"
  - "black formatting (line length: 100)"
  - "pre-commit hooks"

# Module Composition
composition:
  - "Use dependency injection"
  - "Avoid circular dependencies"
  - "Clear module boundaries"
  - "Interface-based design"
**PepperPy** is a Python development accelerator that emphasizes a feature-based, vertical architecture. Each module must be self-contained, responsible for a distinct feature or domain. Core functionalities are centralized in the `core` module, allowing other modules to remain focused on their unique responsibilities while avoiding code duplication.

### Core Architecture Principles

- **Vertical (Feature-Based) Architecture**: Each module is a complete, isolated feature.
- **Single Responsibility**: Each module addresses one specific domain or feature independently.
- **Minimal Configuration**: Modules are configured with smart defaults, requiring minimal setup.
- **Extensible Design**: Modules can be extended or customized as needed, without duplicating functionality already present in the `core` module.

### Code Duplication and Modularization

- **Avoid Redundant Code**: Common or reusable logic must not be duplicated across modules. Such logic should reside in the `core` module or a designated shared module.
- **No Overlapping Functionality**: Each module should implement only the functionality specific to its feature or domain. If functionality overlaps with another module's responsibility, create a new module or leverage the `core` module to encapsulate shared logic.

### Project Structure (Python 3.12+)

```plaintext
pepperpy/
├── pepperpy/
│   ├── core/                # Shared framework core
│   ├── <feature_name>/      # Feature modules follow this pattern
│   ├── database/            # Database module as a full-feature example
│   └── cache/               # Cache module as a full-feature example
├── tests/                   # Test structure mirrors feature structure
├── examples/                # Example usage by feature
├── pyproject.toml
├── README.md
└── LICENSE
```

### Development Standards

- **Single Responsibility**: Each module must strictly adhere to its domain or feature scope.
- **Modularization**: Move any shared logic to the `core` module or create a new module for reusable components.
- **Avoid Code Duplication**: Any code with shared potential must be consolidated to prevent redundancy.

### Code Quality and Style

- **Linting with Ruff**: Follow `ruff` for consistent code quality, addressing issues like:
  - Missing annotations, `f-string` formatting, bare `except`, and `isinstance` over type comparisons.
- **Type Checking with mypy**: Ensure strict type checking across all modules.
- **Testing**: Tests should match the feature structure, ensuring each module's unique functionality is covered.

### Module Template

For creating new modules, reference the following template:

```python
from pepperpy.core.base import BaseModule

class NewFeatureModule(BaseModule):
    """
    New feature description.

    Examples:
        >>> module = NewFeatureModule()
        >>> await module.setup()
    """
    __module_name__ = 'new_feature'

    async def setup(self) -> None:
        """Initialize module."""
        pass

    async def cleanup(self) -> None:
        """Cleanup resources."""
        pass
```

### Quality Assurance

- **Ensure Code Independence**: Validate that each module has a single responsibility and avoids cross-functional overlap.
- **Shared Logic Validation**: Actively review for potential code reuse opportunities and centralize them in `core` when beneficial.
- **Documentation**: Each module must have clear documentation detailing its purpose, setup, and examples of usage.
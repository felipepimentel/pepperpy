name: Release and Publish Package

on:
  push:
    branches:
      - main

jobs:
  release:
    permissions:
      contents: write
      packages: write
      issues: write

    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry/virtualenvs
            ~/.cache/pip
            ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: poetry install --no-root --extras "dev"

      - name: Run Linters
        run: poetry run ruff check . && poetry run black --check .

      - name: Run Tests
        run: poetry run pytest
        env:
          PYTHON_ENV: test

      - name: Configure Git User
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions"

      - name: Run Python Semantic Release
        id: versioning
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry run semantic-release publish -v

      - name: Check if Version Incremented
        if: steps.versioning.outcome == 'success' && steps.versioning.outputs.new_release == 'true'
        run: echo "New version detected, proceeding with build and publish."

      - name: Build the package
        if: steps.versioning.outcome == 'success'
        run: poetry build

      - name: Publish to PyPI
        if: steps.versioning.outcome == 'success'
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: poetry publish --username __token__ --password $PYPI_TOKEN

name: Release and Publish Package

on:
  push:
    branches:
      - main

jobs:
  release:
    if: github.repository == 'felipepimentel/pypepper'

    permissions:
      contents: write
      packages: write
      issues: write

    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: poetry install --no-root

      - name: Configure Git User
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions"

      - name: Install Semantic Release
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github @semantic-release/exec

      - name: Run Semantic Release
        id: versioning
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          semantic-release

      - name: Build the package
        run: poetry build

      - name: Publish to PyPI
        if: steps.versioning.outcome == 'success'
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry publish --username __token__ --password $PYPI_TOKEN

      - name: Create GitHub Release
        if: steps.versioning.outcome == 'success'
        uses: actions/create-release@v1.1.0
        with:
          tag_name: "v${{ steps.versioning.outputs.version }}"
          release_name: "Release v${{ steps.versioning.outputs.version }}"
          body: "Automatic release of version v${{ steps.versioning.outputs.version }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        if: steps.create-release.outcome == 'success'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./dist/*
          asset_name: "${{ steps.versioning.outputs.version }}-asset"
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  discover-projects:
    name: Discover Projects
    runs-on: ubuntu-latest
    outputs:
      paths: ${{ steps.discover.outputs.paths }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Discover Python projects
        id: discover
        run: |
          echo "Finding Python projects..."
          PROJECT_PATHS=$(find packages -name pyproject.toml -exec dirname {} \;)
          PROJECT_JSON=$(echo "$PROJECT_PATHS" | jq -R -s -c 'split("\n")[:-1]')
          echo "::set-output name=paths::$PROJECT_JSON"
        shell: bash

  lint-and-test:
    name: Run Linting and Tests
    needs: discover-projects
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install pip --upgrade
          pip install tox black ruff pytest

      - name: Run linters
        run: |
          black . || exit 1
          ruff check . || exit 1

      - name: Run tests
        run: tox

  build-and-publish:
    name: Build and Publish Packages
    needs: discover-projects
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project-path: ${{ fromJson(needs.discover-projects.outputs.paths) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install build tools
        run: pip install build twine

      - name: Build and Publish
        run: |
          cd ${{ matrix.project-path }}
          python -m build
          twine upload dist/* --non-interactive --repository-url https://upload.pypi.org/legacy/
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
